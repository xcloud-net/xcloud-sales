#定义Nginx运行的用户和用户组
#user www www;
#user root;
user nginx;

#################### http://nginx.org/en/docs/ #############################

#一般一个进程足够了，你可以把连接数设得很大。（worker_processes: 1，worker_connections: 10,000）
#如果有SSL、gzip这些比较消耗CPU的工作，而且是多核CPU的话，可以设为和CPU的数量一样。(worker_processes: CPU核心数)
#或者要处理很多很多的小文件，而且文件总大小比内存大很多的时候，也可以把进程数增加，以充分利用IO带宽（主要似乎是IO操作有block）
#查看cpu信息：cat /proc/cpuinfo
worker_processes 1;

#全局错误日志定义类型,[ debug | info | notice | warn | error | crit ]
error_log /var/log/nginx/error.log warn;
#进程文件
pid /var/run/nginx.pid;

events {
    #参考事件模型,use [ kqueue | rtsig | epoll | /dev/poll | select | poll ];
    #epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型,如果跑在FreeBSD上面,就用kqueue模型.
    #use epoll;

    #单进程最大连接数，受系统进程最大可打开文件数限制，默认是65535
    #ulimit -n 查看系统最大值
    worker_connections 40000;
}

http {
    #文件扩展名与文件类型映射表
    include /etc/nginx/mime.types;
    #默认文件类型
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

    #https://www.cnblogs.com/nethrd/p/9712367.html
    #https://nginx.org/en/docs/http/ngx_http_log_module.html#log_format
    #json日志-数值也最好用“”包起来，防止某些情况下是“-”导致json无法解析
    log_format  log_json  '{'
                          '"remote_addr": "$remote_addr",'
                          '"remote_user": "$remote_user",'
                          '"request_method": "$request_method",'
                          '"request_path":"$request_uri",'
                          '"request_full_url": "$scheme://$http_host$request_uri",'
                          '"http_domain":"$host",'
                          '"http_scheme":"$scheme",'
                          '"http_host":"$http_host",'
                          '"http_status": "$status",'
                          '"http_referer": "$http_referer",'
                          '"http_trace_id": "$http_trace_id",'
                          '"http_x_forwarded_for": "$http_x_forwarded_for",'
                          '"http_port":"$server_port",'
                          '"http_user_agent": "$http_user_agent",'
                          '"upstream_time":"$upstream_response_time",'
                          '"upstream_addr":"$upstream_addr",'
                          '"response_bytes_sent": "$body_bytes_sent",'
                          '"response_time": "$request_time",'
                          '"time_local": "$time_local",'
                          '"@timestamp":"$time_iso8601"'
                          '}';

    #取消全局日志
    #access_log /var/log/nginx/access.log main;
    #默认编码
    charset utf-8;

    #不过滤带下划线的head，默认是off
    underscores_in_headers on;

    #开启目录列表访问,合适下载服务器,默认关闭.
    #显示目录
    #autoindex on;
    #显示文件大小 默认为on,显示出文件的确切大小,单位是bytes 改为off后,显示出文件的大概大小,单位是kB或者MB或者GB
    #autoindex_exact_size on;
    #显示文件时间 默认为off,显示的文件时间为GMT时间 改为on后,显示的文件时间为文件的服务器时间
    #autoindex_localtime on;

    #开启高效文件传输模式,sendfile指令指定nginx是否调用sendfile函数来输出文件,对于普通应用设为 on,
    #如果用来进行下载等应用磁盘IO重负载应用,可设置为off,以平衡磁盘与网络I/O处理速度,降低系统的负载.
    #注意：如果图片显示不正常把这个改成off.
    sendfile on;
    #防止网络阻塞
    #tcp_nopush on;
    #防止网络阻塞
    #tcp_nodelay on;
    keepalive_timeout 65;

    #开启gzip;
    #http://nginx.org/en/docs/http/ngx_http_gzip_module.html#gzip_proxied
    gzip on;
    gzip_static on;
    gzip_min_length 1k;
    gzip_comp_level 5;
    gzip_disable "MSIE [1-6]\.";
    gzip_vary on;
    gzip_proxied any;
    gzip_http_version 1.0;

    gzip_types 
    text/plain  
    text/css 
    text/javascript 
    application/javascript 
    application/x-javascript
    application/xml 
    image/svg+xml
    image/jpeg 
    image/gif 
    image/png;

    #http://nginx.org/en/docs/http/ngx_http_proxy_module.html
    proxy_redirect off;
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_http_version 1.1;
    
    #handle http error
    proxy_intercept_errors on;

    #proxy cache configuration
    proxy_cache_path /nginx-cache levels=1:2 keys_zone=cache_one:100m inactive=1d max_size=10g;

    upstream api_gateway_upstream {
        server api-gateway:8888 weight=10;
    }
    
    upstream web_ui_upstream {
        server web-ui:9999 weight=10;
    }
    
    #禁止其他域名和ip访问
    server {
        listen 80 default;
        server_name _;
        return 403;
    }
    #ssl
    server {
        listen 443 ssl default;
        server_name _;
        
        #配置证书位置
        ssl_certificate /nginx-cert/your-domain.com/xx.pem;
        #配置秘钥位置
        ssl_certificate_key /nginx-cert/your-domain.com/xx.key;

        return 403;
    }
    
    server {
        listen 8888 ssl;
        server_name your-domain.com;
    
        #配置证书位置
        ssl_certificate /nginx-cert/your-domain.com/xx.pem;
        #配置秘钥位置
        ssl_certificate_key /nginx-cert/your-domain.com/xx.key;
    
        ssl_session_timeout 5m;
        ssl_protocols SSLv2 SSLv3 TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
        ssl_prefer_server_ciphers on;
    
        client_max_body_size 20m;
    
		map $time_iso8601 $logdate {
            '~^(?<ymd>\d{4}-\d{2}-\d{2})' $ymd;
            default    'date-not-found';
        }

        access_log /var/log/nginx/access.gateway.$logdate.log log_json;
        error_log /var/log/nginx/access.gateway.$logdate.log error;
    
        location / {
            proxy_pass http://api_gateway_upstream;
        }

        # websocket channel
        location /api/platform-ws/ {
            proxy_pass http://api_gateway_upstream;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        #hide internal api from internet
        location /internal-api/ {
            deny all;
        }

        #hide sensitive access
        location ~* .*\.(asp|aspx|jsp|php|php5|py|sh|ps|sql|db|git|svn)$ {
            deny all;
        }

        #handle static data
        location ~* .*\.(js|css|jpg|jpeg|png|gif)$ {
            expires max;
            add_header x-route 'gateway-static';

            proxy_cache cache_one;
            proxy_cache_valid 200 302 24h;
            proxy_cache_valid 301 30d;
            proxy_cache_valid any 5m;

            #access_log off;
            proxy_pass http://api_gateway_upstream;
        }
    
    }
    
    server {
        listen 80;
        server_name www.your-domain.com your-domain.com;
        #强制https
        rewrite ^(.*)$ https://your-domain.com$1 permanent;
    }

    server {
        listen 443 ssl;
        server_name www.your-domain.com your-domain.com;
    
        #配置证书位置
        ssl_certificate /nginx-cert/your-domain.com/xx.pem;
        #配置秘钥位置
        ssl_certificate_key /nginx-cert/your-domain.com/xx.key;
    
        ssl_session_timeout 5m;
        ssl_protocols SSLv2 SSLv3 TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
        ssl_prefer_server_ciphers on;
    
        client_max_body_size 20m;
    
        #if($host != 'your-domain.com')
        if ($host = 'wwww.your-domain.com') {
            # remove www.,just keep xx.com
            rewrite ^(.*)$ https://your-domain.com$1 permanent;
        }
    
        map $time_iso8601 $logdate {
            '~^(?<ymd>\d{4}-\d{2}-\d{2})' $ymd;
            default    'date-not-found';
        }

        access_log /var/log/nginx/access.ui.$logdate.log main;
        error_log /var/log/nginx/error.ui.$logdate.log error;

        location / {
            #access_log off;
            proxy_pass http://web_ui_upstream;
            #rewrite / /store;
        }

        location /shop {
            #test success 👇
            rewrite /shop /store;
        }
    
        location /store-manage/ {
            #access_log off;
            add_header x-route 'store-manage';
            proxy_pass http://web_ui_upstream;
        }

        location ~* /store-manage/.*\.(js|css|jpg|jpeg|png|gif)$ {
            expires max;
            add_header x-route 'store-manage-static';
            #access_log off;
            proxy_pass http://web_ui_upstream;
        }
    
        location /store/ {
            #access_log off;
            add_header x-route 'store';
            proxy_pass http://web_ui_upstream;
        }

        location ~* /store/.*\.(js|css|jpg|jpeg|png|gif)$ {
            expires max;
            add_header x-route 'store-static';
            #access_log off;
            proxy_pass http://web_ui_upstream;
        }
    
    }
    
    #include /etc/nginx/conf.d/*.conf;

}